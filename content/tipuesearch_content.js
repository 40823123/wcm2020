var tipuesearch = {"pages": [{'title': '簡介', 'text': '四設計一甲40823123簡金良 \n 個人網頁:https://40823123.github.io/wcm2020/content/index.html \n 倉儲:https://github.com/40823123/wcm2020 \n youtube:youtube.com/channel/UC99UaBoif_N-bRjYxjX1ExA?view_as=subscriber \n \n', 'tags': '', 'url': '簡介.html'}, {'title': '各週內容', 'text': '', 'tags': '', 'url': '各週內容.html'}, {'title': 'W6', 'text': '武漢肺炎影響,在宿舍遠端上課,用webcam連結電腦使用。內建攝像頭則可不需要 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': 'youtube live與obs串流 google meeting線上上課 小組網站建立 使用SSH更新網站 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '組長和老師開會,組員透過LIVE streaming觀看過程 \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W10', 'text': 'Python and Flask \n 測試使用Python程式取出表單中學號以及對應成績 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n \n \n \n import csv \n \xa0\xa0 \xa0 \n # read student list \n filename = \'D:/1a/1alist.txt\' \n with open(filename, encoding="utf-8") as f: \n \xa0\xa0\xa0\xa0 content = f.readlines() \n \xa0\xa0\xa0\xa0 student = [x.strip() for x in content] \n #print(content) \n #print(student) \n \xa0\xa0 \xa0 \n # Timestamp, email, ????, url, score, desp, memo \n # 0, 1, 2, 3, 4, 5, 6 \n #total = 0 \n \xa0 \xa0 \n all = {} \n with open(\'D:/1a/1a.csv\', encoding="utf-8") as csv_file: \n \xa0\xa0\xa0\xa0 csv_reader = csv.reader(csv_file, delimiter=\',\') \n \xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 line_count = 0 \n \xa0\xa0\xa0\xa0 for row in csv_reader: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if line_count == 0: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(f\'Column names are {", ".join(row)}\') \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 line_count += 1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 student_num = row[1].split("@")[0] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(student_num) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 student_score = row[4] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(student_score) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 all.update({student_num: student_score}) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 except: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 all.update({student_num: "error"}) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\') \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(f\'\\t{row[4]}\') \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #total += int(row[4]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 line_count += 1 \n #print(all) \n #print(student) \n \xa0 \xa0 \n for i in student: \n \xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 #if i in all: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #pass \n \xa0\xa0\xa0\xa0 #else: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(str(i)) \n \xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 try: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print(i + "\\t" + all[i]) \n \xa0\xa0\xa0\xa0 except: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print(i + "\\t60") \n \xa0 \xa0 \n \xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 #print(f\'Processed {line_count} lines.\') \n \xa0\xa0\xa0\xa0 #print("??=" + str(total/line_count)) \n \n \n \n \n \n \n \n 基本Flask \n \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n from flask import Flask \n \xa0 \xa0 \n app = Flask(__name__) \n \xa0 \xa0 \n @app.route(\'/\') \n def hello_world(): \n \xa0\xa0\xa0\xa0 return \'Hello, From Flask!\' \n \xa0 \xa0 \n if __name__== \'__main__\': \n \xa0\xa0\xa0\xa0 app.run() \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11~W13', 'text': '建立虛擬主機 \n 下載Virtualox(虛擬主機),ubuntu(與window同類型的軟件)\xa0 \n 進入後輸入 \n \n \n \n \n 1 \n \n \n \n sudo vi 00-installer-config.yaml \n \n \n \n \n \n 輸入指令 \n \n \n \n \n \n \n 1 \n \n \n \n sudo netplan apply \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n \n \n \n ping4 140.130.15.254 \n \n \n \n \n \n \n \n 網路部分設定完成 \n 安裝pip3 \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install net-tools \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt update \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install python3-pip \n \n \n \n \n \n \n \n 利用pip3安裝flask flask_cors bs4 lxml markdown \n \n \n \n \n \n \n 1 \n \n \n \n sudo\xa0pip3 install\xa0flask flask_cors bs4 lxml markdown \n \n \n \n \n \n \n \n 建立github資料夾 \n \n \n \n \n \n \n 1 \n \n \n \n mkdir github \n \n \n \n \n \n \n \n 安裝桌面 \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install xorg \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install fluxbox \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install lxde \n \n \n \n \n \n', 'tags': '', 'url': 'W11~W13.html'}, {'title': 'W15', 'text': 'Pypdf2切割pdf檔 \n 切割PDF之.py程式檔 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n \n \n \n # pypdf2_ex1.py \n import os \n from PyPDF2 import PdfFileWriter, PdfFileReader \n \xa0\xa0\xa0 \xa0 \n pdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb")) \n information = [("WhatIsCMS",18,45)] \n \xa0\xa0\xa0 \xa0 \n for page in range(len(information)): \n \xa0\xa0\xa0\xa0 pdf_writer = PdfFileWriter() \n \xa0\xa0\xa0\xa0 start = information[page][1] \n \xa0\xa0\xa0\xa0 end = information[page][2] \n \xa0\xa0\xa0\xa0 while start<=end: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pdf_writer.addPage(pdfReader.getPage(start-1)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 start+=1 \n \xa0\xa0\xa0\xa0 if not os.path.exists("./"): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 os.makedirs(savepath) \n \xa0\xa0\xa0\xa0 output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2]) \n \xa0\xa0\xa0\xa0 with open(output_filename,\'wb\') as out: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pdf_writer.write(out) \n \n \n \n \n \n \n \n 截出要的頁數,再輸入新pdf的檔案名稱即可 \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16-W17', 'text': '利用pypdf2擷取pdf與合併pdf的程式，並利用API放上動態網站測試。 \n 利用pypdf2擷取出3個pdf檔 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n \n \n \n # pypdf2_ex2.py \n import os \n from PyPDF2 import PdfFileWriter, PdfFileReader \n \xa0 \xa0 \n pdfReader = PdfFileReader(open("2019_Book_PracticalFlutter.pdf", "rb")) \n information = [("GitAndGithub",16,26),("GitAndGithub",36,46),("GitAndGithub",196,289)] \n \xa0 \xa0 \n for page in range(len(information)): \n \xa0\xa0\xa0\xa0 pdf_writer = PdfFileWriter() \n \xa0\xa0\xa0\xa0 start = information[page][1] \n \xa0\xa0\xa0\xa0 end = information[page][2] \n \xa0\xa0\xa0\xa0 while start<=end: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pdf_writer.addPage(pdfReader.getPage(start-1)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 start+=1 \n \xa0\xa0\xa0\xa0 if not os.path.exists("./"): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 os.makedirs(savepath) \n \xa0\xa0\xa0\xa0 output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2]) \n \xa0\xa0\xa0\xa0 with open(output_filename,\'wb\') as out: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pdf_writer.write(out) \n \n \n \n \n \n \n \n 可以一次截取多個\xa0 不用一個一個用 \n 再使用以下程式合併成一個pdf檔 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n \n \n \n # pypdf2_ex3.py \n # merge several pdf files \n import sys \n import PyPDF2 \n \xa0 \n pdf_write_object = PyPDF2.PdfFileWriter() \n \xa0 \n #for i in sys.argv[1:]: \n for i in ["GitAndGithub_16_page_26.pdf","GitAndGithub_36_page_46.pdf","GitAndGithub_196_page_289.pdf"]: \n pdf_read_object = PyPDF2.PdfFileReader(i) \n print(\'processing file : \'+ i + \'number of pages : \' + str(pdf_read_object.numPages)) \n for page in range(pdf_read_object.numPages): \n pdf_write_object.addPage(pdf_read_object.getPage(page)) \n \xa0 \n final_file_object = open(\'2020CMS.pdf\', \'wb\') \n pdf_write_object.write(final_file_object) \n final_file_object.close() \n \n \n \n \n \n \n \n 將截出的PDF檔案合而為一 \n Google API(又稱應用程式編譯介面) \n \n', 'tags': '', 'url': 'W16-W17.html'}, {'title': 'SSH KEY', 'text': '隨身系統輸入指令sh \n \n 輸入指令ssh-keygen -t rsa -b 4096 -C "學號" \n 金鑰儲存在y:\\home\\.ssh目錄裡 \n \n 使用puttygen將private key(id_rsa)導入，並轉換為putty能夠讀懂的格式(.ppk)檔案 \n 存好(.ppk)檔後 \n \n 使用scite將public key (id_rsa.pub)打開再用wrap \n \n 完整內容如下: \n', 'tags': '', 'url': 'SSH KEY.html'}, {'title': 'SSH Putty設定', 'text': '前面步驟所生成之.ppk檔案 \n \n 按下save存檔 \n \n 進到git config \n 增加URL \n', 'tags': '', 'url': 'SSH Putty設定.html'}]};